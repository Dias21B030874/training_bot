from aiogram import Router, types, F
from sqlalchemy.orm import Session
from database.db import SessionLocal
from database.models import UserResponse
from datetime import datetime, date
from sqlalchemy import func


ADMIN_IDS = [779889025, 669233477]

router = Router()

@router.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "/add_knowledge ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
    )

@router.message(F.text == "/users")
async def list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with SessionLocal() as session:
        users = session.query(UserResponse).all()
        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        text = "\n\n".join(
            [
                f"ID: {u.user_id}\n"
                f"–ò–º—è: {u.name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {u.phone}\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {u.source}\n"
                f"–ñ–µ–ª–∞–Ω–∏–µ: {u.desired_activity}\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è Gemini: {u.gemini_recommendation}\n"
                f"–õ—É—á—à–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {u.best_direction}"
                for u in users
            ]
        )
        await message.answer(text[:4096])

@router.message(F.text.startswith("/broadcast"))
async def broadcast(message: types.Message, bot):
    if message.from_user.id not in ADMIN_IDS:
        return
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    with SessionLocal() as session:
        users = session.query(UserResponse.user_id).distinct()
        for user in users:
            try:
                await bot.send_message(user.user_id, text)
            except Exception:
                continue
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@router.message(F.text.startswith("/add_knowledge"))
async def add_knowledge(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    text = message.text.replace("/add_knowledge", "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    with open("knowledge_base.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n---\n")
    await message.answer("–ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")


@router.message(F.text == "/dashboard")
async def dashboard(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    with SessionLocal() as session:
        # –ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = date.today()
        new_today = session.query(UserResponse).filter(
            func.date(UserResponse.id) == today
        ).count()

        # –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        directions = session.query(
            UserResponse.desired_activity, func.count(UserResponse.id)
        ).group_by(UserResponse.desired_activity).all()
        directions_text = "\n".join(
            f"{d[0]}: {d[1]}" for d in directions
        )

        # –ö–æ–ª-–≤–æ –ª—é–¥–µ–π, –¥–æ—à–µ–¥—à–∏—Ö –¥–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã (payment)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Payment ‚Äî –¥–æ—à—ë–ª –¥–æ –æ–ø–ª–∞—Ç—ã
        from database.models import Payment
        paid_count = session.query(Payment.user_id).distinct().count()

    await message.answer(
        f"üìä <b>–î–∞—à–±–æ—Ä–¥</b>\n"
        f"–ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
        f"–ó–∞–ø–∏—Å–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:\n{directions_text}\n"
        f"–î–æ—à–ª–∏ –¥–æ –æ–ø–ª–∞—Ç—ã: {paid_count}"
    )