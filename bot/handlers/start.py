from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from bot.keyboards.keyboards import source_keyboard, training_options_keyboard, main_keyboard
from bot.states.forms import Form, OneCForm
from services.gemini import GeminiRecommender
from database.db import SessionLocal
from database.models import UserResponse

gemini = GeminiRecommender()
router = Router()

@router.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@router.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.phone)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 –•–•–• –•–•–• –•–• –•–•):")

@router.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.source)
    await message.answer("–û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?", reply_markup=source_keyboard())

@router.message(Form.source)
async def process_source(message: types.Message, state: FSMContext):
    await state.update_data(source=message.text)
    await state.set_state(Form.problem)
    await message.answer("–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? (–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ)", reply_markup=types.ReplyKeyboardRemove())

@router.message(Form.problem)
async def process_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç Gemini
    recommendation, best_direction = gemini.get_recommendation_with_best(
        user_problem=message.text,
        user_name=data.get("name"),
        user_phone=data.get("phone")
    )
    await state.update_data(gemini_recommendation=recommendation)
    await state.update_data(best_direction=best_direction)
    await state.set_state(Form.direction)
    await message.answer(
        f"{recommendation}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. "
        f"–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º: <b>{best_direction}</b>",
        reply_markup=training_options_keyboard()
    )

@router.message(Form.direction)
async def process_direction(message: types.Message, state: FSMContext):
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î!
    with SessionLocal() as session:
        user = UserResponse(
            user_id=message.from_user.id,
            name=data.get("name"),
            phone=data.get("phone"),
            source=data.get("source"),
            concern=data.get("problem"),
            desired_activity=message.text,
            gemini_recommendation=data.get("gemini_recommendation"),
            best_direction=data.get("best_direction")
        )
        session.add(user)
        session.commit()
    await state.set_state(Form.payment)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {data['source']}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
        f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {message.text}\n\n"
        "–°—É–ø–µ—Ä! –ú–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 1000‚ÇΩ",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
async def process_payment(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=main_keyboard()
    )

# –ö–Ω–æ–ø–∫–∞ "–û —Å—Ç—É–¥–∏–∏"
@router.message(F.text == "üìö –û —Å—Ç—É–¥–∏–∏")
async def about_studio(message: types.Message):
    await message.answer(
        "üìö <b>–û —Å—Ç—É–¥–∏–∏</b>\n"
        "\n"
        "<b>Pilates</b> ‚Äî —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º—ã—à—Ü –∏ —É–ª—É—á—à–µ–Ω–∏—è –æ—Å–∞–Ω–∫–∏.\n"
        "<b>Reformer</b> ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –º—ã—à—Ü.\n"
        "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b> –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –æ–ø—ã—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã.\n"
        "\n"
        "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 8:00‚Äì22:00\n"
        "<b>–ê–¥—Ä–µ—Å:</b> —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n"
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> +7 777 123 45 67\n"
        "<b>–°–∞–π—Ç:</b> https://yourstudio.example.com"
    )

@router.message(F.text == "1–° –∫–∞–±–∏–Ω–µ—Ç")
async def one_c_link(message: types.Message, state: FSMContext):
    await message.answer(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–±–∏–Ω–µ—Ç 1–°: https://1c.example.com\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:"
    )
    await state.set_state(OneCForm.password)

@router.message(OneCForm.password)
async def one_c_password(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –ø–∞—Ä–æ–ª—å –Ω–∏–∫—É–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    await message.answer("–°–ø–∞—Å–∏–±–æ! (–ó–∞–≥–ª—É—à–∫–∞: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–° –±—É–¥–µ—Ç –ø–æ–∑–∂–µ)")
    await state.clear()


@router.message(F.text.in_({"/help", "/start", "/"}))
async def help_command(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/dashboard ‚Äî –¥–∞—à–±–æ—Ä–¥ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëá"
    )